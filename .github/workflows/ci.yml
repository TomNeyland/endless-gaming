name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.8.5"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pypoetry
          endless-gaming-backend/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
          
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
        
    - name: Install dependencies
      run: poetry install --no-interaction
      working-directory: endless-gaming-backend
      
    - name: Run linting with ruff (if available)
      run: |
        if poetry show ruff > /dev/null 2>&1; then
          poetry run ruff check .
        else
          echo "Ruff not installed, skipping linting"
        fi
      working-directory: endless-gaming-backend
      continue-on-error: true
      
    - name: Run type checking with mypy (if available)
      run: |
        if poetry show mypy > /dev/null 2>&1; then
          poetry run mypy .
        else
          echo "MyPy not installed, skipping type checking"
        fi
      working-directory: endless-gaming-backend
      continue-on-error: true
      
    - name: Run tests with pytest
      run: |
        poetry run pytest \
          --verbose \
          --tb=short \
          --maxfail=10 \
          --durations=10
      working-directory: endless-gaming-backend
      env:
        # Set test environment variables
        DATABASE_URL: sqlite:///test_steam_games.db
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          endless-gaming-backend/.pytest_cache/
          endless-gaming-backend/htmlcov/
        retention-days: 7

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t endless-gaming:test .
        
    - name: Test Docker image
      run: |
        # Test that the image builds and runs
        docker run --rm endless-gaming:test python --version
        docker run --rm endless-gaming:test python scripts/collect_games.py --help
        
    - name: Test Docker Compose
      run: |
        # Test docker compose configuration (using modern docker compose command)
        docker compose config

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      run: poetry install --no-interaction
      working-directory: endless-gaming-backend
      
    - name: Run safety check
      run: |
        if poetry show safety > /dev/null 2>&1; then
          poetry run safety check
        else
          echo "Safety not installed, skipping security scan"
        fi
      working-directory: endless-gaming-backend
      continue-on-error: true
      
    - name: Run bandit security linter
      run: |
        if poetry show bandit > /dev/null 2>&1; then
          poetry run bandit -r . -f json -o bandit-report.json || true
        else
          echo "Bandit not installed, skipping security scan"
        fi
      working-directory: endless-gaming-backend
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          endless-gaming-backend/bandit-report.json
        retention-days: 30

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Install dependencies
      run: poetry install --no-interaction
      working-directory: endless-gaming-backend
      
    - name: Run tests with coverage
      run: |
        if poetry show pytest-cov > /dev/null 2>&1; then
          poetry run pytest --cov=. --cov-report=xml --cov-report=html
        else
          echo "pytest-cov not installed, running tests without coverage"
          poetry run pytest
        fi
      working-directory: endless-gaming-backend
      env:
        DATABASE_URL: sqlite:///test_steam_games.db
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./endless-gaming-backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Optional: Deploy job (only on main/master branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Uncomment and configure for actual deployment
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     
    # - name: Build and push Docker image
    #   run: |
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/endless-gaming:latest .
    #     docker push ${{ secrets.DOCKER_USERNAME }}/endless-gaming:latest
    
    - name: Deployment placeholder
      run: |
        echo "âœ… All checks passed - ready for deployment!"
        echo "Configure deployment steps above when ready for production"