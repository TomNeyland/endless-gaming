name: endless-gaming
region: nyc1

# Database-free JSON generation service with internal cron
services:
  - name: json-export-service
    source_dir: /
    github:
      repo: tomneyland/endless-gaming
      branch: master
    environment_slug: python
    
    build_command: |
      cd endless-gaming-backend
      pip install poetry
      poetry config virtualenvs.create false
      poetry install --only=main
      # Just install dependencies, download binaries in run step
      echo "Build completed - binaries will be downloaded at runtime"
    
    run_command: |
      # Navigate to backend directory
      cd endless-gaming-backend
      
      # Download GitHub CLI at runtime if not exists
      if [ ! -f ./gh ]; then
        echo "Downloading GitHub CLI..."
        curl -L https://github.com/cli/cli/releases/latest/download/gh_linux_amd64.tar.gz -o gh.tar.gz
        tar -xzf gh.tar.gz
        cp gh_*/bin/gh ./gh
        chmod +x ./gh
        rm -rf gh*
        echo "GitHub CLI downloaded successfully"
      fi
      
      # Create the cron script
      cat > /app/run-export.sh << 'EOF'
      #!/bin/bash
      set -e
      export PYTHONPATH=/app/endless-gaming-backend
      cd /app/endless-gaming-backend
      echo "$(date): Starting JSON export"
      python scripts/generate_master_json_direct.py /tmp/master.json --max-pages 15 --max-games 100
      
      if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_REPO" ]; then
        # Ensure GitHub CLI is available
        if [ ! -f ./gh ]; then
          echo "Downloading GitHub CLI..."
          curl -L https://github.com/cli/cli/releases/latest/download/gh_linux_amd64.tar.gz -o gh.tar.gz
          tar -xzf gh.tar.gz
          cp gh_*/bin/gh ./gh
          chmod +x ./gh
          rm -rf gh*
        fi
        
        CURRENT_SHA=$(./gh api repos/$GITHUB_REPO/contents/master.json --jq '.sha' 2>/dev/null || echo "")
        CONTENT=$(base64 -i /tmp/master.json | tr -d '\n')
        
        if [ -n "$CURRENT_SHA" ]; then
          ./gh api repos/$GITHUB_REPO/contents/master.json --method PUT --field message="ðŸŽ® Daily update - $(date '+%Y-%m-%d')" --field content="$CONTENT" --field sha="$CURRENT_SHA"
        else
          ./gh api repos/$GITHUB_REPO/contents/master.json --method PUT --field message="ðŸŽ® Initial data - $(date '+%Y-%m-%d')" --field content="$CONTENT"
        fi
        echo "âœ… Updated repository"
      fi
      echo "$(date): Export completed"
      EOF
      
      chmod +x /app/run-export.sh
      
      # Create a simple HTTP health check server
      cat > /app/health_server.py << 'EOF'
      import http.server
      import socketserver
      import json
      from datetime import datetime
      import threading
      import subprocess
      import os
      
      class HealthHandler(http.server.SimpleHTTPRequestHandler):
          def do_GET(self):
              if self.path == '/health' or self.path == '/':
                  self.send_response(200)
                  self.send_header('Content-type', 'application/json')
                  self.end_headers()
                  
                  health_data = {
                      "status": "healthy",
                      "service": "json-export-cron",
                      "timestamp": datetime.utcnow().isoformat() + "Z",
                      "next_run": "Daily at 4 AM UTC"
                  }
                  
                  self.wfile.write(json.dumps(health_data).encode())
              else:
                  self.send_response(404)
                  self.end_headers()
      
      def start_scheduler():
          # Run initial export
          subprocess.run(['/app/run-export.sh'])
          
          # Simple daily scheduler loop
          while True:
              import time
              # Calculate seconds until next 4 AM UTC
              now = datetime.utcnow()
              current_seconds = now.hour * 3600 + now.minute * 60 + now.second
              target_seconds = 4 * 3600  # 4 AM
              
              if current_seconds < target_seconds:
                  sleep_seconds = target_seconds - current_seconds
              else:
                  sleep_seconds = 86400 - current_seconds + target_seconds
              
              print(f"Next export in {sleep_seconds} seconds")
              time.sleep(sleep_seconds)
              subprocess.run(['/app/run-export.sh'])
      
      if __name__ == '__main__':
          # Start scheduler in background thread
          scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
          scheduler_thread.start()
          
          # Start HTTP server for health checks
          PORT = int(os.environ.get('PORT', 8080))
          with socketserver.TCPServer(("", PORT), HealthHandler) as httpd:
              print(f"Health server started on port {PORT}")
              httpd.serve_forever()
      EOF
      
      # Start the health server with background scheduler
      python /app/health_server.py
    
    envs:
      - key: PYTHONPATH
        scope: RUN_AND_BUILD_TIME
        value: /app
      - key: GITHUB_TOKEN
        scope: RUN_TIME
        value: ${GITHUB_TOKEN}
      - key: GITHUB_REPO
        scope: RUN_TIME
        value: "tomneyland/endless-gaming"
    
    http_port: 8080
    instance_count: 1
    instance_size_slug: basic-s
    
    health_check:
      http_path: /health
      initial_delay_seconds: 60
      period_seconds: 10
      timeout_seconds: 5
      failure_threshold: 3
      success_threshold: 1